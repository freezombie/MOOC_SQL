1. Tietokannassa on Products taulu, jossa tuotteet eritellään IDn mukaan. Tuotteen lisäyksen yhteydessä annetaan nimi, kuvaus sekä hinta, jotka lisätään sarkoihin name, description, price.

2. Kun käyttäjä kirjoittaa hakukentään, tai rajaa hakua esimerkiksi hinnan mukaan, haetaan tietokannasta näiden hakuehtojen mukaan näytettäväksi tietty ryhmä tuotteita. Käyttäjän löydettyä halutun tuotteen hän pystyy lisäämään sen ostoskoriin. Lisää ostoskoriin nappi toteuttaa tietokannassa queryn joka lisää ProductsInShoppingCart tauluun uuden ShoppingCartin jossa on id, käyttäjän id (user_id), tuotteen id (product_id). Finishediksi asetetaan false. Finished on täällä erittelemässä mitkä ovat niin sanotusti aktiivisia cartteja, ja mitkä toimivat vaan auttamaan Orderin muodostuksessa. Lopputuloksena pitäisi syntyä taulu jossa on muuten samat tiedot useaan kertaan, paitsi product_id vaihtelee. En kokenut että neljä riviä olisi liikaa, mutta mahdollisuutena toki olisi myös ollut poistaa täältä kaikki ja eriyttää ne ProductsInOrder tauluun. Tuloksena olisi ollut näin kaksi taulua joissa olisi myös yhteensä neljä riviä (product_id, user_id / order_id, product_id).

3. Tietokannassa on tuoteryhmä taulu ProductCategories, sekä erikseen taulu jossa luokitellaan mitä tuotteita kussakin tuoteryhmässä on, eli ProductsInCategory. Eli tuote luokitellaan tuoteryhmään, tai useampaan, lisäämällä se ProductsInCategoryn product_id riville. Käyttäjälle voidaan hakea kyseisen taulun category_idn perusteella tuoteryhmän nimi.

4. Kun käyttäjä painaa tilaus nappia, hänelle annetaan mahdollisuus syöttää yhteystietonsa tai tarkistaa niiden olevan oikeat, uudet tai päivitetyt tiedot lisätään Users tauluun kyseisen käyttäjän idn kohdalla. Lisäksi käyttäjän tulee lisätä tai valita luottokortti jolla tilaus tehdään, tätä varten on CreditCards taulu, jossa on viittaus käyttäjään. Tähän tauluun lisätään kaikki olennaiset tiedot kortista ja yhdistetään se käyttäjään. Käyttäjällä voi olla useita kortteja, kortti taas kuuluu vain yhdelle käyttäjälle. Tilaus siirtyy käsittelyyn tekemällä tauluun Orders uusi tilaus, joka sisältää tilauksen statuksen ("Processing, Awaiting for Products", "In Delivery" "Delivered"), mikä ShoppingCart on liitetty tähän tilaukseen ( johon asetetaan tilausta maksettaessa finished = true ) ja sitä kautta mitkä tuotteet, millä luottokortilla tilaus on maksettu sekä mahdollinen alennuskoodi jota käsitellään kohdassa 8. En ole ihan varma onko luottokortin id tässä oleellinen vai ei, mutta sitä kautta saadaan ainakin tieto käyttäjästä, sekä tilauksen epäonnistuessa on mahdollista vaihtaa tilauksessa käytettävä kortti.

5. Tuotteen sivulla on Reviews alue, johon on haettu Taulusta Reviews arvosteluja tuotteen idn mukaan. Näissä arvosteluissa näkyy muiden käyttäjien antamat tähdet, kuka käyttäjä on, sekä arvosteluteksti. Käyttäjän päättäessä antaa arvostelun kirjoittamalla laatikkoon arvostelutekstin, sekä painamalla tähtien määärää, tallennetaan tietokantaan tauluun Review arvosteluteksti riville ratingText, tähdet ratingStars, product_idhen mikä tuote on kyseessä, user_idhen kuka lähetti kyseisen arvostelun.

6. On taulu Packages johon tallennetaan idn lisäksi hinta kyseisellä paketille. Packagesissa voisi olla myös paketin hinta, jos se tarvitaan. Tauluun PackageProducts tallennetaan mitä tuotteita on missäkin paketissa, eli package_id viittaa Packages.idhen ja product_id viittaa tuotteen idhen. Paketissa voi olla useita tuotteita, ja tuote voi kuulua useaan pakettiin.

7. Tietokantaan on tallennettu erikseen tiedot eri varastoista tauluun Warehouses, tämä on sitä varten että käyttäjä näkee mistä olisi hänestä järkevintä hakea tuote. Käyttäjän avustuksena varastosta löytyvät seuraavat tiedot: osoite, kaupunki ja puhelinnumero. ProductsInWarehouses tauluun tallennetaan tieto tuotteista mitä löytyy mistäkin, käyttäen warehouse_idtä joka viittaa warehouses.idhen sekä product_id joka viittaa mikä tuote sieltä löytyy. Harkitsin myös tavaramäärän lisäämistä riviksi productsinwarehousesiin, mutta koska sql kyselyissä voi laskea tavaramäärän, päädyin siihen etten lisää sitä, vaan jokainen tuote kappale lisätään erikseen tauluun. Jos taulu kasvaa tämän takia liian isoksi, voidaan lisätä kpl lukumäärä omaksi rivikseen.

8. Tilausta tehtäessä (kohta 4) on mahdollista syöttää alennus koodi, joka lisätään discountcode kohtaan tilauksen idn perusteella Orders tauluun. Kun koodi on syötetty tai kun käyttäjä painaa tilausnappulaa, voidaan tarkastaa tietokannasta onko alennuskoodi jo käytetty tarkastamalla discountcode rivi sekä creditcard_idn kautta haettu käyttäjä.

9. Kun tuote ostetaan, lisätään käyttäjän aiemmat ostokset, sekä tässä tilauksessa olevat ostokset tyylillä tämä tuote AlsoBought taulun product_a_id kohtaan ja aiemmat sekä muut tässä tilauksessa olevat kohtaan product_b_id. Tässäkin kohtaa harkitsin tauluun lisättävän rivin jossa on tilausmääriä, mutta kohdan 7 perustelut pätevät myös tähän. Näistä tiedoista voidaan sitten laskea sql countin avulla esimerkiksi top 10 tilatuinta tuotetta niiltä ihmisiltä jotka ovat ostaneet myös tämän tuotteen. Tämän ratkaisun heikkous on se, ettei se ota huomioon esimerkiksi relevanssia tai suodata pois äärimmäisen yleisesti ostettavia tuotteita joista kaikki ovat kyllä tietoisia. 



